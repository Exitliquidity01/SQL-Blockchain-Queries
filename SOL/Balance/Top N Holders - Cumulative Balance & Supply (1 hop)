WITH 

tokens_received AS (
    SELECT 
        block_time,
        to_owner AS wallet,
        SUM(amount / POW(10, {{decimals}})) AS tokens_received
    FROM
        tokens_solana.transfers
    WHERE
        token_mint_address = '{{token}}'
    GROUP BY
        block_time, to_owner
),

tokens_sent AS (
    SELECT
        block_time,
        from_owner AS wallet,
        SUM(amount / POW(10, {{decimals}})) AS tokens_sent
    FROM
        tokens_solana.transfers
    WHERE
        token_mint_address = '{{token}}'
    GROUP BY
        block_time, from_owner
),

wallet_balances AS (
    SELECT
        COALESCE(tr.wallet, ts.wallet) AS wallet,
        COALESCE(tr.block_time, ts.block_time) AS block_time,
        COALESCE(tr.tokens_received, 0) - COALESCE(ts.tokens_sent, 0) AS balance_change
    FROM
        tokens_received tr
    FULL OUTER JOIN
        tokens_sent ts ON tr.wallet = ts.wallet AND tr.block_time = ts.block_time
),

MintingAddresses AS (
    SELECT
        to_owner AS wallet_address
    FROM 
        tokens_solana.transfers
    WHERE 
        token_mint_address = '{{token}}'
        AND from_owner IS NULL
), 

TotalSupply AS (
    SELECT
       SUM(amount) / POW(10, {{decimals}}) AS total_supply
    FROM 
        tokens_solana.transfers
    WHERE 
        token_mint_address = '{{token}}'
        AND from_owner IS NULL
),

FilteredWallets AS (
    SELECT 
        wallet,
        SUM(balance_change) AS balance
    FROM
        wallet_balances
    WHERE
        wallet NOT IN (SELECT wallet_address FROM MintingAddresses)
    GROUP BY
        wallet
    ORDER BY
        balance DESC
    LIMIT {{N}}
),

OutflowWallets AS (
    SELECT DISTINCT
        ts.to_owner AS wallet
    FROM
        tokens_solana.transfers ts
    JOIN
        FilteredWallets fw ON ts.from_owner = fw.wallet
    WHERE
        ts.token_mint_address = '{{token}}'
        AND ts.to_owner NOT IN (SELECT wallet_address FROM MintingAddresses)
),

CombinedWallets AS (
    SELECT wallet FROM FilteredWallets
    UNION DISTINCT
    SELECT wallet FROM OutflowWallets
),

AccumulatedBalances AS (
    SELECT
        wb.block_time,
        SUM(wb.balance_change) OVER (ORDER BY wb.block_time ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_balance
    FROM
        wallet_balances wb
    JOIN
        CombinedWallets cw ON wb.wallet = cw.wallet
)

SELECT
    ab.block_time AS "Block Time",
    ab.cumulative_balance AS "Cumulative Balance (in Tokens)",
    (ab.cumulative_balance / ts.total_supply) AS "Percentage of Total Supply"
FROM
    AccumulatedBalances ab
CROSS JOIN
    TotalSupply ts
ORDER BY
    ab.block_time ASC;
